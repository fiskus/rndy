#!/usr/bin/env python
# coding: utf-8

import sys
import getpass
import os
import getopt
import hashlib
import base64
import ConfigParser
if sys.platform == "linux2":
    import pygtk
    import gtk

configPath = os.environ["HOME"] + "/.pwget/config.ini"
pairsPath = os.environ["HOME"] + "/.pwget/pairs"
if os.path.exists(configPath):
    config = ConfigParser.ConfigParser()
    config.read(configPath)
if os.path.exists(pairsPath):
    passwords = ConfigParser.ConfigParser()
    passwords.read(pairsPath)

def pwget(username, domain, masterPassword):
    password = hashlib.sha1()
    password.update(username)
    password.update(domain)
    password.update(masterPassword)
    sha1hash = password.hexdigest()
    encodedHash = base64.b64encode(sha1hash)
    return encodedHash[:20]

def generatePairs(masterPassword):
    if config.has_section("sites"):
        output = ""
        for option in config.options("sites"):
            output += option + ": " + generatePass(masterPassword, option, config.get("sites", option), 1) + "\n"
        return output

def writePairs(pairs):
    pairsFile = open(pairsPath, "w+")
    pairsFile.write("[pairs]\n" + pairs)
    pairsFile.close()

def generatePass(masterPassword, domain, username, rawOutput):
    if domain:
        if username == "":
            if config.has_section("sites") and config.has_option("sites", domain):
                username = config.get("sites", domain)
        password = pwget(username, domain, masterPassword)
        if rawOutput == 0:
            clipboard = gtk.clipboard_get()
            clipboard.set_text(password)
            clipboard.store() # don't get why this is not working
            raw_input("Press `Enter` to continueâ€¦") # clipboard able to use when program is working
        return password
    else:
        usage()
        sys.exit()

def proceedFurther(domain, username, rawOutput, genPairs):
    if genPairs:
        masterPassword = getpass.getpass()
        writePairs(generatePairs(masterPassword))
    else:
        if domain and passwords.has_section("pairs") and passwords.has_option("pairs", domain):
            print passwords.get("pairs", domain)
        else:
            masterPassword = getpass.getpass()
            if rawOutput:
                print generatePass(masterPassword, domain, username, rawOutput)
            else:
                generatePass(masterPassword, domain, username, rawOutput)

def usage():
    print "define username, domain name and master-password"

def main(argv):
    username = ""
    domain = ""
    rawOutput = 0
    genPairs = 0
    try:
        opts, args = getopt.gnu_getopt(argv, "hu:d:", ["help", "username", "domain", "raw-output", "generate-pairs"])
    except getopt.GetoptError:
        usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        if opt in ("-u", "--username"):
            username = arg
        if opt in ("-d", "--domain"):
            domain = arg
        if opt in ("--raw-output"):
            rawOutput = 1
        if opt in ("--generate-pairs"):
            genPairs = 1
    if opts:
        proceedFurther(domain, username, rawOutput, genPairs)
    else:
        usage()
        sys.exit()

if __name__ == "__main__":
    main(sys.argv[1:])
